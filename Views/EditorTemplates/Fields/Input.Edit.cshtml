@model Orchard.Fields.Fields.InputField
@using Orchard.Utility.Extensions;
@using Orchard.Fields.Settings;
@{
    var settings = Model.PartFieldDefinition.Settings.GetModel<InputFieldSettings>();
}

<dt>
    <label for="@Html.FieldIdFor(m => m.Value)" @if (settings.Required){ <text>class="required"</text> }>@Model.DisplayName</label>
</dt>
<dd>
    <input 
        type="@settings.Type.ToString().ToLower()" 
        id="@Html.FieldIdFor(m => m.Value)" 
        name="@Html.FieldNameFor(m => m.Value)"
        value="@Model.Value"
        @if(!String.IsNullOrWhiteSpace(settings.Title)) {<text> title="@settings.Title"</text>} 
        @if(settings.Required) {<text> required="required"</text> }
        @if(settings.AutoFocus) {<text> autofocus="autofocus"</text> }
        @if(settings.AutoComplete) {<text> autocomplete="on"</text> }
        @if(!string.IsNullOrWhiteSpace(settings.Placeholder)) {<text> placeholder="@settings.Placeholder"</text>}
        @if(!string.IsNullOrEmpty(settings.Pattern)) {<text> pattern="@settings.Pattern"</text>}
        @if(!string.IsNullOrEmpty(settings.EditorCssClass)) {<text> class="@settings.EditorCssClass"</text>} else {<text> class="textMedium"</text>}
        @if(settings.MaxLength > 1) {<text> maxlength="@settings.MaxLength.ToString()"</text>}  
    />
    
    @Html.ValidationMessageFor(m => m.Value)
    <span class="hint">@settings.Hint</span>
</dd>
